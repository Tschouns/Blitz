===Physics Sim===
- Rigid body dynamics (unconstrained):
  x polygon centroid (center of mass in uniform density bodies) calculation
  x inertia and torque calculation, based on force applied to a specific point
  x angular acceleration and velocity calculation

- Collision detection
  - basic collision detection (narrow phase)
  X GJK Algorithm
  - good abstraction for comparing all types of objects with eachother
  - AABB broad phase optimization

- Contstrains:
  - "world bounds"
  - rigid compounds
  - bearings
  - friction
  - "bounciness" / capacity to absorb mechanical force
  - springs
  - collision groups

- Forces
  X gravity
  - air resistance
  - wind
  - buoyant force
  - blast

===Display API===
- Evalluation and implementation of a reasonable display API (some lightweight managed DX10 or openGL wrapper...)
  X SharpDX?
  - SharpGL?
  - MonoGame?

===Input===
- Abstraction
  X Input action
  X Keyboard buttons
  - Mouse buttons

===Camera===
  X Projection
  X Camera movement
  - Camera effects:
	X position by key input, axis-aligned
	- position by key input, relative to orientation
	- position by drag
	- position ..., smooth acceleration
	- position "track shot"
        - orientation by key input
	X scale by key (or mouse wheel) input, linear
	X scale progressive (to resemble camera "movement" in Z axis)

==="Engine"===
- Reasonable game loop and game time management
  X Update loop
  - multiple rendering loops in seperate threads
  - "game state" buffer

===Sprites===
- Review the designs of XNA!

===Animation===
- Sprite batch animation
- Rigged character animation

===Demo "Game"===
- Create project
- "World"
- Use physics to toss the cars around
